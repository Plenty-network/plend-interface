/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { Event, EventFilter } from 'ethers';

export interface TypedEvent<TArgsArray extends Array<any> = any, TArgsObject = any> extends Event {
  args: TArgsArray & TArgsObject;
}

export interface TypedEventFilter<_TEvent extends TypedEvent> extends EventFilter {}

export interface TypedListener<TEvent extends TypedEvent> {
  (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}

type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;

export interface OnEvent<TRes> {
  <TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
    listener: TypedListener<TEvent>
  ): TRes;
  (eventName: string, listener: Listener): TRes;
}

export type MinEthersFactory<C, ARGS> = {
  deploy(...a: ARGS[]): Promise<C>;
};

export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<infer C, any> ? C : never;

export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
  ? Parameters<F['deploy']>
  : never;

export type PromiseOrValue<T> = T | Promise<T>;

export interface LeverageInterface extends utils.Interface {
  functions: {
    'BASE_CURRENCY_DECIMALS()': FunctionFragment;
    'POOL()': FunctionFragment;
    'RATIO_DIVISOR()': FunctionFragment;
    'STAKED_TOKEN()': FunctionFragment;
    'WRAPPED_STAKED_TOKEN()': FunctionFragment;
    'WRAPPED_TOKEN()': FunctionFragment;
    'WRAPPED_TOKEN_GATEWAY()': FunctionFragment;
    'loop(uint256,uint256,uint256,uint16)': FunctionFragment;
    'unLoop(uint256,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'BASE_CURRENCY_DECIMALS'
      | 'POOL'
      | 'RATIO_DIVISOR'
      | 'STAKED_TOKEN'
      | 'WRAPPED_STAKED_TOKEN'
      | 'WRAPPED_TOKEN'
      | 'WRAPPED_TOKEN_GATEWAY'
      | 'loop'
      | 'unLoop'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'BASE_CURRENCY_DECIMALS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'POOL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'RATIO_DIVISOR', values?: undefined): string;
  encodeFunctionData(functionFragment: 'STAKED_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WRAPPED_STAKED_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WRAPPED_TOKEN', values?: undefined): string;
  encodeFunctionData(functionFragment: 'WRAPPED_TOKEN_GATEWAY', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'loop',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'unLoop',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: 'BASE_CURRENCY_DECIMALS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'POOL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'RATIO_DIVISOR', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'STAKED_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WRAPPED_STAKED_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WRAPPED_TOKEN', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'WRAPPED_TOKEN_GATEWAY', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loop', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unLoop', data: BytesLike): Result;

  events: {};
}

export interface Leverage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LeverageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_CURRENCY_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    POOL(overrides?: CallOverrides): Promise<[string]>;

    RATIO_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    WRAPPED_STAKED_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    WRAPPED_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    WRAPPED_TOKEN_GATEWAY(overrides?: CallOverrides): Promise<[string]>;

    loop(
      loops: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unLoop(
      amountToUnloop: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_CURRENCY_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  POOL(overrides?: CallOverrides): Promise<string>;

  RATIO_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

  WRAPPED_STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

  WRAPPED_TOKEN(overrides?: CallOverrides): Promise<string>;

  WRAPPED_TOKEN_GATEWAY(overrides?: CallOverrides): Promise<string>;

  loop(
    loops: PromiseOrValue<BigNumberish>,
    borrowRatio: PromiseOrValue<BigNumberish>,
    interestRateMode: PromiseOrValue<BigNumberish>,
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unLoop(
    amountToUnloop: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    interestRateMode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_CURRENCY_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    POOL(overrides?: CallOverrides): Promise<string>;

    RATIO_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

    WRAPPED_STAKED_TOKEN(overrides?: CallOverrides): Promise<string>;

    WRAPPED_TOKEN(overrides?: CallOverrides): Promise<string>;

    WRAPPED_TOKEN_GATEWAY(overrides?: CallOverrides): Promise<string>;

    loop(
      loops: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unLoop(
      amountToUnloop: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BASE_CURRENCY_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    POOL(overrides?: CallOverrides): Promise<BigNumber>;

    RATIO_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    WRAPPED_STAKED_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    WRAPPED_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    WRAPPED_TOKEN_GATEWAY(overrides?: CallOverrides): Promise<BigNumber>;

    loop(
      loops: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unLoop(
      amountToUnloop: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_CURRENCY_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATIO_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKED_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRAPPED_STAKED_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRAPPED_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRAPPED_TOKEN_GATEWAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loop(
      loops: PromiseOrValue<BigNumberish>,
      borrowRatio: PromiseOrValue<BigNumberish>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unLoop(
      amountToUnloop: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      interestRateMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

export const LeverageABI = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_stakedToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_wrappedStakedToken',
        type: 'address',
        internalType: 'address',
      },
      { name: '_pool', type: 'address', internalType: 'address' },
      {
        name: '_wrappedToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_wrappedTokenGateway',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'nonpayable',
  },
  { type: 'receive', stateMutability: 'payable' },
  {
    type: 'function',
    name: 'BASE_CURRENCY_DECIMALS',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'POOL',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract IPool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'RATIO_DIVISOR',
    inputs: [],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'STAKED_TOKEN',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IEtherfiETH',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'WRAPPED_STAKED_TOKEN',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IWrappedEtherfiETH',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'WRAPPED_TOKEN',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract WETH9' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'WRAPPED_TOKEN_GATEWAY',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IWrappedTokenGatewayV3',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'loop',
    inputs: [
      { name: 'loops', type: 'uint256', internalType: 'uint256' },
      { name: 'borrowRatio', type: 'uint256', internalType: 'uint256' },
      {
        name: 'interestRateMode',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'referralCode', type: 'uint16', internalType: 'uint16' },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'unLoop',
    inputs: [
      {
        name: 'amountToUnloop',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'to', type: 'address', internalType: 'address' },
      {
        name: 'interestRateMode',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
];
